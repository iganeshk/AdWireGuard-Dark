name: 'Build Adguard with wg-easy images'

env:
  DOCKER_REPO: 'adwireguard-dark'
  GO_VERSION: '1.18.7'
  NODE_VERSION: '14'
  ADGUARDHOME_BUILD_PATH: './adguardhome'
  ADGUARDHOME_DIST_PATH: './adguardhome/dist'
  ADGUARDHOME_DOCKERFILE_PATH: './adguardhome/scripts/make'
  WGEASY_REPO_DIR: 'wg-dark'
  WGEASY_BUILD_DIR: 'wg-dark-src'

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-latest:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v3'
        with:
          fetch-depth: 0

      - name: 'Checkout AdguardHome Official Repository'
        uses: 'actions/checkout@v3'
        with:
          repository: AdguardTeam/AdGuardHome
          ref: master
          path: ${{ env.ADGUARDHOME_BUILD_PATH }}
          fetch-depth: 0

      - name: 'Generate a Release Tag'
        working-directory: ${{ env.ADGUARDHOME_BUILD_PATH }}
        id: build-version
        run: |
          latest_version=$( git -C "./" describe HEAD | sed 's|\(.*\)-.*|\1|' )
          datetime_now="$( TZ=":America/Chicago" date '+%Y%m%d.%H%M' )CST"
          echo "release_tag=${datetime_now}" >> $GITHUB_ENV
          echo "release_name=${latest_version}-dark" >> $GITHUB_ENV
          echo "build_date=$( date -u +'%Y-%m-%dT%H:%M:%SZ' )" >> $GITHUB_ENV

      - name: 'Fetch and Apply Dark Theme Patch'
        working-directory: '${{ env.ADGUARDHOME_BUILD_PATH }}'
        run: |
          # curl -o adguardhome-dark-mustard-theme.patch \
          # https://raw.githubusercontent.com/iganeshk/AdWireGuard-Dark/patch-1.0/adguardhome-dark-mustard-theme.patch
          # git apply adguardhome-dark-mustard-theme.patch
          curl https://raw.githubusercontent.com/iganeshk/AdWireGuard-Dark/patch-1.0/adguardhome-dark-mustard-theme.patch \
          | git apply -v

      - name: 'Fetch and Apply Build Scripts Patch'
        working-directory: '${{ env.ADGUARDHOME_BUILD_PATH }}'
        run: |
          # curl -o adguardhome-build-scripts.patch \
          # https://raw.githubusercontent.com/iganeshk/AdWireGuard-Dark/patch-1.0/adguardhome-build-scripts.patch
          # git apply adguardhome-build-scripts.patch
          curl https://raw.githubusercontent.com/iganeshk/AdWireGuard-Dark/patch-1.0/adguardhome-build-scripts.patch \
          | git apply -v

      - name: 'Set up Go'
        uses: 'actions/setup-go@v3'
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: 'Set up Node'
        uses: 'actions/setup-node@v3'
        with:
          node-version: '${{ env.NODE_VERSION }}'

      - name: 'Set up Go modules cache'
        uses: 'actions/cache@v3'
        with:
          path: '~/go/pkg/mod'
          key: "${{ runner.os }}-go-${{ hashFiles(format('{0}/go.sum', env.ADGUARDHOME_BUILD_PATH)) }}"
          restore-keys: '${{ runner.os }}-go-'

      - name: 'Get npm cache directory'
        id: 'npm-cache'
        run: |
          echo "npm_cache_dir=$(npm config get cache)" >> $GITHUB_ENV

      - name: 'Set up npm cache'
        uses: 'actions/cache@v3'
        with:
          path: '${{ env.npm_cache_dir }}'
          key: "${{ runner.os }}-node-${{ hashFiles(format('{0}/client/package-lock.json', env.ADGUARDHOME_BUILD_PATH)) }}"
          restore-keys: '${{ runner.os }}-node-'

      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v2'

      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v2'

      - name: 'Build AdGuardHome Binaries'
        working-directory: '${{ env.ADGUARDHOME_BUILD_PATH }}'
        run: |
          make VERSION=${{ env.release_name }} \
          BUILD_SNAP=0 SIGN=0 VERBOSE=1 OS="linux" ARCH="amd64 arm arm64" SNAP=0 \
          build-release

      # Login to docker and Github CR so build-docker can push images out
      - name: 'Login to DockerHub'
        uses: 'docker/login-action@v2'
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 'Log in to the Github Container registry'
        uses: 'docker/login-action@v2'
        with:
          registry: 'ghcr.io'
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # AGH's docker image build script
      #   - name: 'Build Docker Images'
      #   working-directory: ${{ env.ADGUARDHOME_BUILD_PATH }}
      #   run: |
      #     make WG_PATH="${{ env.WGEASY_BUILD_DIR }}" \
      #     VERSION=${{ env.release_name }} BUILD_SNAP=0 SIGN=0 VERBOSE=1 OS="linux" ARCH="amd64 arm" SNAP=0 \
      #     DOCKER_IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}" \
      #     GITHUB_IMAGE_NAME="${{ github.repository }}" \
      #     RELEASE_TAG="${{ env.release_tag }}" \
      #     build-docker

      - name: 'Checkout wg-easy (dark) personal repo into distibutables directory'
        uses: 'actions/checkout@v3'
        with:
          repository: iganeshk/wg-easy-dark
          ref: production
          path: '${{ env.ADGUARDHOME_DIST_PATH }}/${{ env.WGEASY_REPO_DIR }}'
          fetch-depth: 0

      - name: 'Apply Patches to wg-easy'
        working-directory: '${{ env.ADGUARDHOME_DIST_PATH }}/${{ env.WGEASY_REPO_DIR }}'
        run: |
          curl https://raw.githubusercontent.com/iganeshk/AdWireGuard-Dark/patch-1.0/wg-easy-dark-theme.patch | git apply -v

      - name: 'Fetch Dockerfile'
        working-directory: ${{ env.ADGUARDHOME_BUILD_PATH }}
        run: |
          rm -f ./Dockerfile
          curl -o ./Dockerfile https://raw.githubusercontent.com/iganeshk/AdWireGuard-Dark/patch-1.0/Dockerfile

      - name: 'Fetch entrypoint into wg-dark-src and prep dists for docker'
        working-directory: '${{ env.ADGUARDHOME_DIST_PATH }}'
        run: |
          mkdir docker
          cp "./AdGuardHome_linux_amd64/AdGuardHome/AdGuardHome" "./docker/AdGuardHome_linux_amd64_"
          cp "./AdGuardHome_linux_arm64/AdGuardHome/AdGuardHome" "./docker/AdGuardHome_linux_arm64_"
          cp "./AdGuardHome_linux_arm_6/AdGuardHome/AdGuardHome" "./docker/AdGuardHome_linux_arm_v6"
          cp "./AdGuardHome_linux_arm_7/AdGuardHome/AdGuardHome" "./docker/AdGuardHome_linux_arm_v7"
          curl -o ./docker/entrypoint.sh https://raw.githubusercontent.com/iganeshk/AdWireGuard-Dark/patch-1.0/entrypoint.sh
          cp -r '${{ env.WGEASY_REPO_DIR }}/src/' './docker/${{ env.WGEASY_BUILD_DIR }}'

      # Build & Publish
      - name: Build & Publish Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ env.ADGUARDHOME_BUILD_PATH }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          build-args: |
              DIST_DIR=${{ env.ADGUARDHOME_DIST_PATH }}/docker
              WG_PATH=${{ env.WGEASY_BUILD_DIR }}
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.created=${{ env.build_date }}
            org.opencontainers.image.description="AdWireGuard (AdGuard+WireGuard) Dark Themed"
            org.opencontainers.image.licenses="GPL-3.0"
            org.opencontainers.image.source="https://github/${{ github.repository }}"
            org.opencontainers.image.title="AdWireGuard"
            org.opencontainers.image.url="https://github/${{ github.repository }}"
            org.opencontainers.image.version=${{ env.release_name }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:${{ env.release_tag }}
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ env.release_tag }}

      - name: 'Publish Releases'
        uses: 'ncipollo/release-action@v1'
        with:
          artifacts: "${{ env.ADGUARDHOME_BUILD_PATH}}/dist/*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.release_tag }}
          name: ${{ env.release_name }}
          allowUpdates: true

  notify:
    needs:
    - build-latest
    # Secrets are not passed to workflows that are triggered by a pull request
    # from a fork.
    #
    # Use always() to signal to the runner that this job must run even if the
    # previous ones failed.
    'if':
      ${{
        always() &&
        github.repository_owner == 'iganeshk' &&
        (
          github.event_name == 'push' ||
          github.event.pull_request.head.repo.full_name == github.repository
        )
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Notify over Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}
            Repository: ${{ github.repository }}
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
